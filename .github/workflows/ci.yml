name: ci
on: pull_request
jobs:
  lint-commit:
    name: lint (commit)
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v1
        with:
          node-version: "12.x"
      - run: npm install --save-dev @commitlint/{config-conventional,cli} commitlint-plugin-jira-rules commitlint-config-jira
      - name: Add dependencies for commitlint action
        run: echo "NODE_PATH=$GITHUB_WORKSPACE/node_modules" >> $GITHUB_ENV
      - run: git remote add upstream https://github.com/modin-project/unidist.git
      - run: git fetch upstream
      - run: npx commitlint --from upstream/master --to $(git log upstream/master..HEAD --pretty=format:"%h" | tail -1) --verbose

  lint-black:
    name: lint (black)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: actions/setup-python@v2
        with:
          python-version: "3.8.x"
          architecture: "x64"
      - run: pip install black
      - run: black --check --diff .

  lint-flake8:
    name: lint (flake8)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: actions/setup-python@v2
        with:
          python-version: "3.8.x"
          architecture: "x64"
      - run: pip install flake8 flake8-print
      - run: flake8 --enable=T .

  test-ubuntu:
    needs: [lint-commit, lint-black, lint-flake8]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9"]
        backend: ["ray", "mpi", "dask", "multiprocessing", "python"]
    env:
      UNIDIST_BACKEND: ${{matrix.backend}}
    name: test-ubuntu (backend ${{matrix.backend}}, python ${{matrix.python-version}})
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: unidist
          environment-file: environment.yml
          python-version: ${{matrix.python-version}}
          channel-priority: strict
          # we set use-only-tar-bz2 to false in order for conda to properly find new packages to be installed
          # for more info see https://github.com/conda-incubator/setup-miniconda/issues/264
          use-only-tar-bz2: false
      # we install pickle5 here as it is missing in Ray for python 3.7 from PyPI
      # remove this when we return Ray back to installation from conda-forge
      # see details in https://github.com/modin-project/unidist/issues/219
      - name: Pickle5 installation for python 3.7
        run: conda install pickle5 -c conda-forge
        if: matrix.python-version == '3.7'
      - name: Conda environment
        run: |
          conda info
          conda list
      - run: python -m pytest unidist/test/
        if: matrix.backend != 'mpi'
      # when using a directory to run with mpiexec MPI gets hung after executing tests
      # so we run the test files one by one
      - run: mpiexec -n 1 python -m pytest unidist/test/test_actor.py
        if: matrix.backend == 'mpi'
      - run: mpiexec -n 1 python -m pytest unidist/test/test_async_actor.py
        if: matrix.backend == 'mpi'
      - run: mpiexec -n 1 python -m pytest unidist/test/test_task.py
        if: matrix.backend == 'mpi'
      - run: mpiexec -n 1 python -m pytest unidist/test/test_general.py
        if: matrix.backend == 'mpi'

  test-windows:
    needs: [lint-commit, lint-black, lint-flake8]
    runs-on: windows-latest
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9"]
        backend: ["ray", "dask", "multiprocessing", "python", "mpi"]
    env:
      UNIDIST_BACKEND: ${{matrix.backend}}
    name: test-windows (backend ${{matrix.backend}}, python ${{matrix.python-version}})
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: unidist
          environment-file: environment.yml
          python-version: ${{matrix.python-version}}
          channel-priority: strict
          # we set use-only-tar-bz2 to false in order for conda to properly find new packages to be installed
          # for more info see https://github.com/conda-incubator/setup-miniconda/issues/264
          use-only-tar-bz2: false
      # we install pickle5 here as it is missing in Ray for python 3.7 from PyPI
      # remove this when we return Ray back to installation from conda-forge
      # see details in https://github.com/modin-project/unidist/issues/219
      - name: Pickle5 installation for python 3.7
        run: conda install pickle5 -c conda-forge
        if: matrix.python-version == '3.7'
      - name: Conda environment
        run: |
          conda info
          conda list
      - run: python -m pytest unidist/test/
        if: matrix.backend != 'mpi'
      # when using a directory to run with mpiexec MPI gets hung after executing tests
      # so we run the test files one by one
      - run: mpiexec -n 1 python -m pytest unidist/test/test_actor.py
        if: matrix.backend == 'mpi'
      - run: mpiexec -n 1 python -m pytest unidist/test/test_async_actor.py
        if: matrix.backend == 'mpi'
      - run: mpiexec -n 1 python -m pytest unidist/test/test_task.py
        if: matrix.backend == 'mpi'
      - run: mpiexec -n 1 python -m pytest unidist/test/test_general.py
        if: matrix.backend == 'mpi'
